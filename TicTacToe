#include <iostream>
#include <vector>

using namespace std;

const int BOARD_SIZE = 9;
const char EMPTY_CELL = ' ';
const char PLAYERS[] = {'X', 'O'};

void displayBoard(const vector<char>& board) {
    cout << "-------------" << endl;
    for (int i = 0; i < BOARD_SIZE; i += 3) {
        cout << "| " << board[i] << " | " << board[i + 1] << " | " << board[i + 2] << " |" << endl;
        cout << "-------------" << endl;
    }
}

bool checkWin(const vector<char>& board, char player) {
    const int WINNING_COMBINATIONS[][3] = {
        {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, 
        {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, 
        {0, 4, 8}, {2, 4, 6}         
    };

    for (const auto& combination : WINNING_COMBINATIONS) {
        if (board[combination[0]] == player && board[combination[1]] == player && board[combination[2]] == player) {
            return true;
        }
    }
    return false;
}

bool checkTie(const vector<char>& board) {
    for (char c : board) {
        if (c == EMPTY_CELL) {
            return false;
        }
    }
    return true;
}

int main() {
    cout << "               WELCOME TO TIC-TAC-TOE GAME "<<endl;
    cout << "Name : Saral Jain" <<endl;
    vector<char> board(BOARD_SIZE, EMPTY_CELL);
    int currentPlayerIndex = 0;

    while (true) {
        displayBoard(board);
        cout << "Player " << PLAYERS[currentPlayerIndex] << ", enter a position (1-9): ";
        int position;
        cin >> position;

        if (position < 1 || position > BOARD_SIZE || board[position - 1] != EMPTY_CELL) {
            cout << "Invalid move. Try again." << endl;
            continue;
        }

        board[position - 1] = PLAYERS[currentPlayerIndex];

        if (checkWin(board, PLAYERS[currentPlayerIndex])) {
            displayBoard(board);
            cout << "Player " << PLAYERS[currentPlayerIndex] << " wins!" << endl;
            break;
        }

        if (checkTie(board)) {
            displayBoard(board);
            cout << "It's a tie!" << endl;
            break;
        }

        currentPlayerIndex = 1 - currentPlayerIndex; 
    }

    return 0;
}
